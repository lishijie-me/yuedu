import{_ as e,o as a,c as d,b as r}from"./app-PrvqUoBY.js";const i="/yuedu/assets/Linux01--l9pRZG2.png",n={},c=r('<h1 id="linux-开发环境搭建" tabindex="-1"><a class="header-anchor" href="#linux-开发环境搭建" aria-hidden="true">#</a> <code>Linux</code> 开发环境搭建</h1><blockquote><p>小白的第一台 <code>Linux</code> 服务器搭建</p></blockquote><h2 id="为什么要搞这个教程" tabindex="-1"><a class="header-anchor" href="#为什么要搞这个教程" aria-hidden="true">#</a> 为什么要搞这个教程？</h2><p>工作中，大家接到需求或人物，代码一顿敲，调试，接着就可以进行测试上线，功能交付完成。这些行云流水的工作背后，大家忽略了一个重要问题：环境！！！</p><p>只有稳定的环境，才能让我们毫无顾虑的开发实现。所以我想着出一套在 <code>linux</code> 环境下搭建开发环境的教程，说是教程，其实就是给自己看的一个笔记。写道这里肯定有伙伴说了，现在大家都直接用Docker了，哪还有人一个个自己搭建环境？这话确实不错，Docker上的东西，确实简单易用，不用搞这些复杂的配置，但是这个灵活性很差，我们总不能一直依赖别人搭建好的镜像吧，工作中，老板们肯定也不希望我们一直去拉别人的镜像来投入生产。于是我决定继续完成这套教程。</p><h2 id="专栏整体架构" tabindex="-1"><a class="header-anchor" href="#专栏整体架构" aria-hidden="true">#</a> 专栏整体架构</h2><p><img src="'+i+'" alt="java小白的第一台linux服务器"></p><h2 id="专栏形式" tabindex="-1"><a class="header-anchor" href="#专栏形式" aria-hidden="true">#</a> 专栏形式</h2><h2 id="资源整理" tabindex="-1"><a class="header-anchor" href="#资源整理" aria-hidden="true">#</a> 资源整理</h2><h2 id="写在最后" tabindex="-1"><a class="header-anchor" href="#写在最后" aria-hidden="true">#</a> 写在最后</h2>',10),h=[c];function t(o,s){return a(),d("div",null,h)}const u=e(n,[["render",t],["__file","001-env-build.html.vue"]]);export{u as default};
